generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum Role {
  Manager
  Admin
}

enum ObjectType {
  House
  Daily
  Bath
}

enum Status {
  Active
  Inactive
  Archived
}

enum Season {
  All
  Summer
  Winter
}

enum DiscountType {
  Percent
  Amount
}

enum PaymentType {
  Cash
  Card
  Electronic
  Partner
  BusinessTransfer
}

enum PaymentStatus {
  Paid
  Pending
  Canceled
  Refund
}

enum BookingStatus {
  PendingInvoice
  PendingPayment
  Paid
  PrePaid
  Closed
  Canceled
}

enum CommoditiesOrderStatus {
  PendingPayment
  PartiallyPaid
  Paid
  Refund
  RefundRequired
  Canceled
}

enum SourcePoll {
  SocialNetwork
  Friends
  SearchEngines
  Other
}

type Option {
  id   String
  name String
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String   @unique
  password  String
  role      Role     @default(Manager)
  salt      String
  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @unique
  type      ObjectType
  sorting   Int
  status    Status     @default(Inactive)
  entries   Entry[]
  startHour Int
  endHour   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Entry {
  id                  String                       @id @default(auto()) @map("_id") @db.ObjectId
  groupId             String                       @db.ObjectId
  group               Group                        @relation(fields: [groupId], references: [id])
  title               String
  images              String[]
  description         String
  content             String
  seats               Int
  extraSeats          Int                          @default(0)
  priceWeekday        Float
  priceWeekend        Float
  priceExtraSeat      Float
  prePay              Int
  parking             Int                          @default(0)
  status              Status
  units               Unit[]
  holidayPrices       EntryHolidayPrice[]
  futurePrices        EntryFuturePrice[]
  bookingLimitations  EntryBookingLimitation[]
  discountsByDays     EntryDiscountByDays[]
  promoCodesByBooking EntryPromoCodeByBooking[]
  extraCommodities    Commodity[]
  includedCommodities CommoditiesIncludedInEntry[]
  partnerFees         PartnerEntryFee[]
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
}

model Unit {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  number            String                 @unique
  entryId           String                 @db.ObjectId
  entry             Entry                  @relation(fields: [entryId], references: [id])
  bookings          Booking[]
  status            Status                 @default(Active)
  temporaryClosures UnitTemporaryClosure[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model UnitTemporaryClosure {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  unitId String   @db.ObjectId
  unit   Unit     @relation(fields: [unitId], references: [id])
  start  DateTime
  end    DateTime
}

model EntryBookingLimitation {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId String   @db.ObjectId
  entry   Entry    @relation(fields: [entryId], references: [id])
  minDays Int
  start   DateTime
  end     DateTime
}

model EntryHolidayPrice {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId String   @db.ObjectId
  entry   Entry    @relation(fields: [entryId], references: [id])
  price   Float
  start   DateTime
  end     DateTime
}

model EntryFuturePrice {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId      String   @db.ObjectId
  entry        Entry    @relation(fields: [entryId], references: [id])
  priceWeekday Float
  priceWeekend Float
  start        DateTime
}

model EntryDiscountByDays {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId   String   @db.ObjectId
  entry     Entry    @relation(fields: [entryId], references: [id])
  daysCount Int
  discount  Float
  start     DateTime
  end       DateTime
}

model EntryPromoCodeByBooking {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId              String   @db.ObjectId
  entry                Entry    @relation(fields: [entryId], references: [id])
  minDays              Int
  discount             Float
  validityDays         Int
  discountedEntriesIds String[] @db.ObjectId
}

model CommoditiesIncludedInEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  entryId     String    @db.ObjectId
  count       Int       @default(1)
  entry       Entry     @relation(fields: [entryId], references: [id])
  commodityId String    @db.ObjectId
  commodity   Commodity @relation(fields: [commodityId], references: [id])
}

model Commodity {
  id            String                       @id @default(auto()) @map("_id") @db.ObjectId
  title         String                       @unique
  price         Float                        @default(0)
  isSport       Boolean                      @default(false)
  sorting       Int                          @default(0)
  status        Status                       @default(Active)
  countPayments Int                          @default(0)
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  entries       CommoditiesIncludedInEntry[]
  entry         Entry?                       @relation(fields: [entryId], references: [id])
  entryId       String?                      @db.ObjectId
  orders        CommoditiesIncludedInOrder[]
}

model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @unique
  icon         String   @default("")
  description  String
  content      String   @default("")
  images       String[]
  link         String   @default("")
  sorting      Int      @default(0)
  isOnHomepage Boolean  @default(false)
  status       Status   @default(Active)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GalleryImage {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  description String @default("")
  season      Season @default(All)
  sorting     Int
  status      Status @default(Inactive)
}

model News {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  start     DateTime
  end       DateTime
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  title     String            @unique
  fee       Int
  bookings  Booking[]
  entries   PartnerEntryFee[]
  status    Status
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model PartnerEntryFee {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  fee       Int
  entryId   String  @db.ObjectId
  entry     Entry   @relation(fields: [entryId], references: [id])
  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, entryId])
}

model PromoCode {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  code             String       @unique
  discount         Float
  type             DiscountType
  comment          String       @default("")
  usageCountLimit  Int          @default(0)
  bookingDateLimit DateTime?    @db.Date
  usageDateLimit   DateTime?    @db.Date
  entriesIds       String[]     @default([])
  isAutoGenerated  Boolean      @default(false)
  status           Status
  bookings         Booking[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String    @unique
  email     String
  isVIP     Boolean   @default(false)
  bookings  Booking[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model BusinessClient {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  ORGN                 String
  INN                  String    @unique
  OKPO                 String
  OKVED                String    @default("")
  BIK                  String
  checkingAccount      String
  correspondentAccount String
  bookings             Booking[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Booking {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  number            String              @unique
  start             DateTime
  end               DateTime
  prePay            Float               @default(0)
  total             Float               @default(0)
  comment           String              @default("")
  commentAdmin      String              @default("")
  extraSeats        Int                 @default(0)
  parking           Int                 @default(0)
  isArrived         Boolean             @default(false)
  partnerFee        Int                 @default(0)
  sourcePoll        SourcePoll          @default(SocialNetwork)
  status            BookingStatus       @default(PendingPayment)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  payments          Payment[]
  unitId            String              @db.ObjectId
  unit              Unit                @relation(fields: [unitId], references: [id])
  promoCodeId       String?             @db.ObjectId
  promoCode         PromoCode?          @relation(fields: [promoCodeId], references: [id])
  partnerId         String?             @db.ObjectId
  partner           Partner?            @relation(fields: [partnerId], references: [id])
  clientId          String              @db.ObjectId
  client            Client              @relation(fields: [clientId], references: [id])
  organizationId    String?             @db.ObjectId
  organization      BusinessClient?     @relation(fields: [organizationId], references: [id])
  commoditiesOrders CommoditiesOrder[]
  attachments       BookingAttachment[]
}

model CommoditiesIncludedInOrder {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  count       Int              @default(1)
  orderId     String           @db.ObjectId
  order       CommoditiesOrder @relation(fields: [orderId], references: [id])
  commodityId String           @db.ObjectId
  commodity   Commodity        @relation(fields: [commodityId], references: [id])
}

model CommoditiesOrder {
  id          String                       @id @default(auto()) @map("_id") @db.ObjectId
  number      String                       @unique()
  total       Float
  status      CommoditiesOrderStatus       @default(PendingPayment)
  commodities CommoditiesIncludedInOrder[]
  payments    Payment[]
  bookingId   String?                      @db.ObjectId
  booking     Booking?                     @relation(fields: [bookingId], references: [id])
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
}

model Payment {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  amount             Float
  type               PaymentType
  token              String?
  paidDate           DateTime?         @db.Date
  status             PaymentStatus     @default(Pending)
  clientId           String?           @db.ObjectId
  client             Client?           @relation(fields: [clientId], references: [id])
  bookingId          String?           @db.ObjectId
  booking            Booking?          @relation(fields: [bookingId], references: [id])
  commoditiesOrder   CommoditiesOrder? @relation(fields: [commoditiesOrderId], references: [id])
  commoditiesOrderId String?           @db.ObjectId
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model UploadFile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  file     Bytes
  fileName String
  isPublic Boolean @default(false)
}

model BookingAttachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId   String   @db.ObjectId
  booking     Booking  @relation(fields: [bookingId], references: [id])
  files       Option[]
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

type WorkHours {
  start Int
  end   Int
}

model Settings {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  singleton         Boolean   @unique @default(true)
  workHours         WorkHours
  houseBookingHours WorkHours
  season            Season
}

model Documents {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  singleton     Boolean @unique @default(true)
  publicOffer   String
  privacyPolicy String
}

// model payments_booking_moves {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   payment_id Int      @db.UnsignedInt
//   from_id    Int      @db.UnsignedInt
//   to_id      Int      @db.UnsignedInt
//   datetime   DateTime @default(now()) @db.DateTime(0)
//   user_id    Int      @default(0) @db.UnsignedInt
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model goodslist_units {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id       Int      @db.UnsignedInt
//   number           String   @default("") @db.VarChar(50)
//   email            String   @default("") @db.VarChar(100)
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   yandextoken      String   @db.VarChar(100)
//   status           Int      @db.UnsignedTinyInt
// }

// model logs_emails {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   module    Boolean  @default(false)
//   recepient String   @default("") @db.VarChar(100)
//   subject   String   @default("") @db.VarChar(255)
//   text      String   @db.Text
//   html      String   @db.Text
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   target_id Int      @default(0) @db.UnsignedInt
//   user_id   Int      @default(0) @db.UnsignedInt
//   status    Boolean  @default(false)

//   @@index([target_id], map: "target_id")
// }

// model objects_discounts {
//   id          Int @id @default(autoincrement()) @db.UnsignedInt
//   type_when   Int @db.UnsignedInt
//   type_target Int @db.UnsignedInt
//   discount    Int @default(0) @db.UnsignedTinyInt

//   @@index([type_target], map: "type_target")
//   @@index([type_when], map: "type_when")
// }

// model payments_goodslist {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   goodslist_id     Int      @db.UnsignedInt
//   unit_id         Int      @default(0) @db.UnsignedInt
//   count            Int      @default(0) @db.UnsignedInt
//   amount           Float    @default(0) @db.Float
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   status           Int      @default(0) @db.UnsignedTinyInt
//   type             Boolean
//   user_id          Int      @default(0) @db.UnsignedInt
// }

// model users_logins {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   user_id   Int      @db.UnsignedInt
//   token     String   @default("") @db.VarChar(100)
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   ip        String   @default("") @db.VarChar(50)
//   useragent String   @default("") @db.VarChar(255)
//   status    Boolean  @default(true)
// }
