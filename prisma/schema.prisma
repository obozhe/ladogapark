generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum Roles {
  Manager
  Admin
}

enum ObjectType {
  House
  Daily
  Bath
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  login     String   @unique
  password  String
  role      Roles    @default(Manager)
  salt      String
  banned    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ObjectGroup {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  alias         String        @unique
  type          ObjectType
  sorting       Int
  isActive      Boolean       @default(true)
  objectEntries ObjectEntry[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ObjectEntry {
  id                  String                    @id @default(auto()) @map("_id") @db.ObjectId
  objectGroupId       String                    @db.ObjectId
  objectGroup         ObjectGroup               @relation(fields: [objectGroupId], references: [id])
  title               String
  images              String[]
  description         String
  content             String
  seats               Int
  extraSeats          Int
  priceWeekdays       Float
  priceWeekends       Float
  priceRenewal        Float
  priceExtraSeat      Float
  prepay              Int
  parking             Int
  sorting             Int
  isActive            Boolean
  units               ObjectUnit[]
  holidayPrices       EntryHolidayPrice[]
  futurePrices        EntryFuturePrice[]
  bookingLimitations  EntryBookingLimitation[]
  discountsByDays     EntryDiscountByDays[]
  promoCodesByBooking EntryPromoCodeByBooking[]
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
}

model ObjectUnit {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  number            String                 @unique()
  objectEntryId     String                 @db.ObjectId
  objectEntry       ObjectEntry            @relation(fields: [objectEntryId], references: [id])
  bookings          Booking[]
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  temporaryClosures UnitTemporaryClosure[]
}

model UnitTemporaryClosure {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  objectUnitId String     @db.ObjectId
  objectUnit   ObjectUnit @relation(fields: [objectUnitId], references: [id])
  start        DateTime
  end          DateTime
}

model EntryBookingLimitation {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  objectEntryId String      @db.ObjectId
  objectEntry   ObjectEntry @relation(fields: [objectEntryId], references: [id])
  minDays       Int
  start         DateTime
  end           DateTime
}

model EntryHolidayPrice {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  objectEntryId String      @db.ObjectId
  objectEntry   ObjectEntry @relation(fields: [objectEntryId], references: [id])
  price         Float
  start         DateTime
  end           DateTime
}

model EntryFuturePrice {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  objectEntryId String      @db.ObjectId
  objectEntry   ObjectEntry @relation(fields: [objectEntryId], references: [id])
  priceWeekday  Float
  priceWeekend  Float
  start         DateTime
}

model EntryDiscountByDays {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  objectEntryId String      @db.ObjectId
  objectEntry   ObjectEntry @relation(fields: [objectEntryId], references: [id])
  daysCount     Int
  discount      Float
  start         DateTime
  end           DateTime
}

model EntryPromoCodeByBooking {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  objectEntryId        String      @db.ObjectId
  objectEntry          ObjectEntry @relation(fields: [objectEntryId], references: [id])
  minDays              Int
  discount             Float
  validityDays         Int
  discountedEntriesIds String[]    @db.ObjectId
}

model Booking {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  number           String     @unique()
  objectUnitId     String     @db.ObjectId
  objectUnit       ObjectUnit @relation(fields: [objectUnitId], references: [id])
  // type_id           Int        @db.UnsignedInt
  datetimeStart    DateTime
  datetimeEnd      DateTime
  amount           Float      @default(0)
  prepay           Float      @default(0)
  paidTotal        Float      @default(0)
  partnerId        Int        @default(0)
  partnerFee       Float      @default(0)
  name             String     @default("")
  companyName      String     @default("")
  phone            String     @default("")
  email            String     @default("")
  clientId         String     @db.ObjectId
  client           Client     @relation(fields: [clientId], references: [id])
  comment          String     @default("")
  commentAdmin     String     @default("")
  extraSeats       Int        @default(0)
  typeServicesIds  String
  parking          Int        @default(0)
  arrived          Boolean    @default(false)
  countPayments    Int        @default(0)
  countAttachments Int        @default(0)
  promocodeId      Int        @default(0)
  sourcePoll       Int        @default(0)
  payAccData       String
  // token            String
  status           Int        @default(0)
  undelitable      Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @default("")
  phone     String    @default("")
  email     String    @default("")
  vip       Boolean
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// model Service {
//   id               String        @id @default(auto()) @map("_id") @db.ObjectId
//   title            String        @default("")
//   alias            String        @default("")
//   icon             String        @default("")
//   description      String        @default("")
//   content          String        @default("")
//   location         String        @default("")
//   sorting          Int           @default(0)
//   homepage         Boolean       @default(true)
//   isActive         Boolean       @default(true)
//   objectEntries    ObjectEntry[] @relation(fields: [objectEntriesIds], references: [id])
//   objectEntriesIds String[]      @db.ObjectId
// }

// model Good {
//   id            String       @id @default(auto()) @map("_id") @db.ObjectId
//   title         String       @default("")
//   icon          String       @default("")
//   selling       Boolean      @default(false)
//   price         Float        @default(0)
//   sport         Boolean      @default(false)
//   sorting       Int          @default(0)
//   isActive      Boolean      @default(true)
//   countPayments Int          @default(0)
//   objectEntry   ObjectEntry? @relation(fields: [objectEntryId], references: [id])
//   objectEntryId String?      @db.ObjectId
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

// model booking_attachments {
//   id          Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id  Int      @db.UnsignedInt
//   file        String   @default("") @db.VarChar(255)
//   description String   @db.Text
//   datetime    DateTime @default(now()) @db.DateTime(0)
//   user_id     Int      @default(0) @db.UnsignedInt
// }

// model gallery {
//   id          Int     @id @default(autoincrement()) @db.UnsignedInt
//   photo       String  @default("") @db.VarChar(255)
//   description String  @db.Text
//   season      Boolean
//   sorting     Int     @db.UnsignedInt
//   status      Boolean @default(true)
// }

// model goodslist {
//   id             Int     @id @default(autoincrement()) @db.UnsignedInt
//   title          String  @default("") @db.VarChar(255)
//   icon           String  @default("") @db.VarChar(255)
//   selling        Boolean @default(false)
//   price          Float   @default(0) @db.Float
//   sport          Boolean @default(false)
//   sorting        Int     @default(0) @db.UnsignedInt
//   status         Boolean @default(true)
//   count_payments Int     @default(0) @db.UnsignedInt
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model goodslist_orders {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id       Int      @db.UnsignedInt
//   number           String   @default("") @db.VarChar(50)
//   email            String   @default("") @db.VarChar(100)
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   yandextoken      String   @db.VarChar(100)
//   status           Int      @db.UnsignedTinyInt
// }

// model logs_emails {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   module    Boolean  @default(false)
//   recepient String   @default("") @db.VarChar(100)
//   subject   String   @default("") @db.VarChar(255)
//   text      String   @db.Text
//   html      String   @db.Text
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   target_id Int      @default(0) @db.UnsignedInt
//   user_id   Int      @default(0) @db.UnsignedInt
//   status    Boolean  @default(false)

//   @@index([target_id], map: "target_id")
// }

// model news {
//   id           Int      @id @default(autoincrement()) @db.UnsignedInt
//   title        String   @default("") @db.VarChar(250)
//   content      String   @db.Text
//   date_publish DateTime @db.Date
//   date_end     DateTime @db.Date
//   status       Boolean  @default(true)
// }

// model objects_days_discounts {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   type_id    Int      @db.UnsignedInt
//   days       Int      @db.UnsignedInt
//   discount   Int      @db.UnsignedInt
//   date_start DateTime @db.Date
//   date_end   DateTime @db.Date
// }

// model objects_discounts {
//   id          Int @id @default(autoincrement()) @db.UnsignedInt
//   type_when   Int @db.UnsignedInt
//   type_target Int @db.UnsignedInt
//   discount    Int @default(0) @db.UnsignedTinyInt

//   @@index([type_target], map: "type_target")
//   @@index([type_when], map: "type_when")
// }

// model objects_minbooking {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   type_id    Int      @db.UnsignedInt
//   min        Int      @db.UnsignedInt
//   date_start DateTime @db.Date
//   date_end   DateTime @db.Date
// }

// model objects_services {
//   id      Int     @id @default(autoincrement()) @db.UnsignedInt
//   type_id Int     @db.UnsignedInt
//   title   String  @default("") @db.VarChar(150)
//   price   Float   @default(0) @db.Float
//   active  Boolean @default(true)
// }

// model partners {
//   id           Int    @id @default(autoincrement()) @db.UnsignedInt
//   title        String @default("") @db.VarChar(255)
//   fee          Int    @default(0) @db.UnsignedTinyInt
//   fee_objects  String @db.Text
//   count_orders Int    @default(0) @db.UnsignedInt
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model payments_booking {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id       Int      @db.UnsignedInt
//   amount           Float    @db.Float
//   type             Int      @db.UnsignedTinyInt
//   yandextoken      String   @default("") @db.VarChar(100)
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   datetime_updated DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   status           Int      @default(0) @db.UnsignedTinyInt
//   user_id          Int      @default(0) @db.UnsignedInt

//   @@index([booking_id], map: "booking_id")
//   @@index([datetime_created, datetime_updated, status], map: "datetime_created")
// }

// model payments_booking_moves {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   payment_id Int      @db.UnsignedInt
//   from_id    Int      @db.UnsignedInt
//   to_id      Int      @db.UnsignedInt
//   datetime   DateTime @default(now()) @db.DateTime(0)
//   user_id    Int      @default(0) @db.UnsignedInt
// }

// model payments_goodslist {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   goodslist_id     Int      @db.UnsignedInt
//   order_id         Int      @default(0) @db.UnsignedInt
//   count            Int      @default(0) @db.UnsignedInt
//   amount           Float    @default(0) @db.Float
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   status           Int      @default(0) @db.UnsignedTinyInt
//   type             Boolean
//   user_id          Int      @default(0) @db.UnsignedInt
// }

// model prices_hollidays {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   type_id    Int      @db.UnsignedInt
//   price      Float    @db.Float
//   date_start DateTime @db.Date
//   date_end   DateTime @db.Date
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model promocodes {
//   id           Int      @id @default(autoincrement()) @db.UnsignedInt
//   promocode    String   @unique(map: "promocode") @default("") @db.VarChar(15)
//   sale         Float    @default(0) @db.Float
//   sale_type    Boolean  @default(true)
//   comment      String   @default("") @db.VarChar(150)
//   limit_count  Int      @default(0) @db.UnsignedInt
//   limit_date   DateTime @db.Date
//   types_ids    String   @db.Text
//   count_orders Int      @default(0) @db.UnsignedInt
//   status       Boolean  @default(false)
//   deleted      Int      @default(0) @db.UnsignedInt
//   booking_id   Int      @default(0) @db.UnsignedInt
// }

// model referrers {
//   id           Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id   Int      @default(0) @db.UnsignedInt
//   client_id    Int      @default(0) @db.UnsignedInt
//   http_referer String   @db.Text
//   datetime     DateTime @default(now()) @db.DateTime(0)
// }

// model services {
//   id          Int     @id @default(autoincrement()) @db.UnsignedInt
//   title       String  @default("") @db.VarChar(150)
//   alias       String  @default("") @db.VarChar(50)
//   icon        String  @db.VarChar(150)
//   description String  @db.Text
//   content     String  @db.Text
//   location    String  @default("") @db.VarChar(255)
//   sorting     Int     @db.UnsignedInt
//   homepage    Boolean
//   status      Boolean
// }

// model testimonials {
//   id          Int      @id @default(autoincrement()) @db.UnsignedInt
//   name        String   @default("") @db.VarChar(150)
//   photo       String   @default("") @db.VarChar(255)
//   testimonial String   @db.Text
//   source      String   @default("") @db.VarChar(255)
//   email       String   @db.VarChar(255)
//   date        DateTime @db.Date
//   homepage    Boolean  @default(false)
//   status      Boolean  @default(false)
// }

// model unsubscribes {
//   id       Int      @id @default(autoincrement()) @db.UnsignedInt
//   email    String   @unique(map: "email") @default("") @db.VarChar(100)
//   ip       String   @default("") @db.VarChar(100)
//   datetime DateTime @default(now()) @db.DateTime(0)
// }

// model users_logins {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   user_id   Int      @db.UnsignedInt
//   token     String   @default("") @db.VarChar(100)
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   ip        String   @default("") @db.VarChar(50)
//   useragent String   @default("") @db.VarChar(255)
//   status    Boolean  @default(true)
// }
