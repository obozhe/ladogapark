generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum Role {
  Manager
  Admin
}

enum ObjectType {
  House
  Daily
  Bath
}

enum Status {
  Active
  Inactive
  Archived
}

enum Season {
  All
  Summer
  Winter
}

enum DiscountType {
  Percent
  Amount
}

enum PaymentType {
  Cash
  Amount
  Yandex
  Partner
  BusinessTransfer
}

enum PaymentStatus {
  Paid
  Pending
  Cancelled
  Refund
}

enum SourcePoll {
  SocialNetwork
  Friends
  SearchEngines
  Other
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String   @unique
  password  String
  role      Role     @default(Manager)
  salt      String
  isBanned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String     @unique
  type      ObjectType
  sorting   Int
  status    Status     @default(Inactive)
  entries   Entry[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Entry {
  id                  String                       @id @default(auto()) @map("_id") @db.ObjectId
  groupId             String                       @db.ObjectId
  group               Group                        @relation(fields: [groupId], references: [id])
  title               String
  images              String[]
  description         String
  content             String
  seats               Int
  extraSeats          Int                          @default(0)
  priceWeekday        Float
  priceWeekend        Float
  priceExtraSeat      Float
  prepay              Int
  parking             Int                          @default(0)
  status              Status
  units               Unit[]
  holidayPrices       EntryHolidayPrice[]
  futurePrices        EntryFuturePrice[]
  bookingLimitations  EntryBookingLimitation[]
  discountsByDays     EntryDiscountByDays[]
  promoCodesByBooking EntryPromoCodeByBooking[]
  extraServices       EntryExtraService[]
  includedCommodities CommoditiesIncludedInEntry[]
  partnerFees         PartnerEntryFee[]
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
}

model Unit {
  id                String                 @id @default(auto()) @map("_id") @db.ObjectId
  number            String                 @unique
  entryId           String                 @db.ObjectId
  entry             Entry                  @relation(fields: [entryId], references: [id])
  bookings          Booking[]
  status            Status                 @default(Active)
  temporaryClosures UnitTemporaryClosure[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model UnitTemporaryClosure {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  unitId String   @db.ObjectId
  unit   Unit     @relation(fields: [unitId], references: [id])
  start  DateTime
  end    DateTime
}

model EntryBookingLimitation {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId String   @db.ObjectId
  entry   Entry    @relation(fields: [entryId], references: [id])
  minDays Int
  start   DateTime
  end     DateTime
}

model EntryHolidayPrice {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId String   @db.ObjectId
  entry   Entry    @relation(fields: [entryId], references: [id])
  price   Float
  start   DateTime
  end     DateTime
}

model EntryFuturePrice {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId      String   @db.ObjectId
  entry        Entry    @relation(fields: [entryId], references: [id])
  priceWeekday Float
  priceWeekend Float
  start        DateTime
}

model EntryDiscountByDays {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId   String   @db.ObjectId
  entry     Entry    @relation(fields: [entryId], references: [id])
  daysCount Int
  discount  Float
  start     DateTime
  end       DateTime
}

model EntryPromoCodeByBooking {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  entryId              String   @db.ObjectId
  entry                Entry    @relation(fields: [entryId], references: [id])
  minDays              Int
  discount             Float
  validityDays         Int
  discountedEntriesIds String[] @db.ObjectId
}

model EntryExtraService {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  entryId String @db.ObjectId
  entry   Entry  @relation(fields: [entryId], references: [id])
  title   String
  price   Float
}

model CommoditiesIncludedInEntry {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  entryId     String    @db.ObjectId
  entry       Entry     @relation(fields: [entryId], references: [id])
  commodityId String    @db.ObjectId
  commodity   Commodity @relation(fields: [commodityId], references: [id])
}

model Commodity {
  id            String                       @id @default(auto()) @map("_id") @db.ObjectId
  title         String                       @unique
  price         Float                        @default(0)
  isSport       Boolean                      @default(false)
  sorting       Int
  status        Status
  countPayments Int                          @default(0)
  entries       CommoditiesIncludedInEntry[]
}

model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @unique
  icon         String   @default("")
  description  String
  content      String   @default("")
  images       String[]
  link         String   @default("")
  sorting      Int      @default(0)
  isOnHomepage Boolean  @default(false)
  status       Status   @default(Active)
}

model GalleryImage {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  description String @default("")
  season      Season @default(All)
  sorting     Int
  status      Status @default(Inactive)
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @default("")
  phone     String    @unique
  email     String    @default("")
  isVIP     Boolean   @default(false)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model News {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  start     DateTime
  end       DateTime
  status    Status
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Partner {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  title    String            @unique
  fee      Int
  bookings Booking[]
  entries  PartnerEntryFee[]
}

model PartnerEntryFee {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  fee       Int
  entryId   String  @db.ObjectId
  entry     Entry   @relation(fields: [entryId], references: [id])
  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  @@unique([partnerId, entryId])
}

model PromoCode {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  code             String       @unique
  discount         Float
  type             DiscountType
  comment          String       @default("")
  usageCountLimit  Int          @default(0)
  bookingDateLimit DateTime?    @db.Date
  usageDateLimit   DateTime?    @db.Date
  entriesIds       String[]     @default([])
  status           Status
  bookings         Booking[]
}

model Booking {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  number       String           @unique
  start        DateTime
  end          DateTime
  total        Float            @default(0)
  companyName  String?          @default("")
  clientId     String           @db.ObjectId
  client       Client           @relation(fields: [clientId], references: [id])
  comment      String           @default("")
  commentAdmin String           @default("")
  extraSeats   Int              @default(0)
  servicesIds  String[]
  parking      Int              @default(0)
  isArrived    Boolean          @default(false)
  promocodeId  Int              @default(0)
  sourcePoll   SourcePoll       @default(SocialNetwork)
  token        String?          @default("")
  status       Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  payments     BookingPayment[]
  unitId       String           @db.ObjectId
  unit         Unit             @relation(fields: [unitId], references: [id])
  promoCodeId  String?          @db.ObjectId
  promoCode    PromoCode?       @relation(fields: [promoCodeId], references: [id])
  partnerId    String?          @db.ObjectId
  partner      Partner?         @relation(fields: [partnerId], references: [id])
}

model BookingPayment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String        @db.ObjectId
  booking   Booking       @relation(fields: [bookingId], references: [id])
  amount    Float
  type      Int
  token     String        @default("")
  paidDate  DateTime      @db.Date
  status    PaymentStatus @default(Pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// model payments_booking_moves {
//   id         Int      @id @default(autoincrement()) @db.UnsignedInt
//   payment_id Int      @db.UnsignedInt
//   from_id    Int      @db.UnsignedInt
//   to_id      Int      @db.UnsignedInt
//   datetime   DateTime @default(now()) @db.DateTime(0)
//   user_id    Int      @default(0) @db.UnsignedInt
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments

// model booking_attachments {
//   id          Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id  Int      @db.UnsignedInt
//   file        String   @default("") @db.VarChar(255)
//   description String   @db.Text
//   datetime    DateTime @default(now()) @db.DateTime(0)
//   user_id     Int      @default(0) @db.UnsignedInt
// }

// /// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model goodslist_units {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id       Int      @db.UnsignedInt
//   number           String   @default("") @db.VarChar(50)
//   email            String   @default("") @db.VarChar(100)
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   yandextoken      String   @db.VarChar(100)
//   status           Int      @db.UnsignedTinyInt
// }

// model logs_emails {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   module    Boolean  @default(false)
//   recepient String   @default("") @db.VarChar(100)
//   subject   String   @default("") @db.VarChar(255)
//   text      String   @db.Text
//   html      String   @db.Text
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   target_id Int      @default(0) @db.UnsignedInt
//   user_id   Int      @default(0) @db.UnsignedInt
//   status    Boolean  @default(false)

//   @@index([target_id], map: "target_id")
// }

// model objects_discounts {
//   id          Int @id @default(autoincrement()) @db.UnsignedInt
//   type_when   Int @db.UnsignedInt
//   type_target Int @db.UnsignedInt
//   discount    Int @default(0) @db.UnsignedTinyInt

//   @@index([type_target], map: "type_target")
//   @@index([type_when], map: "type_when")
// }

// model payments_goodslist {
//   id               Int      @id @default(autoincrement()) @db.UnsignedInt
//   goodslist_id     Int      @db.UnsignedInt
//   unit_id         Int      @default(0) @db.UnsignedInt
//   count            Int      @default(0) @db.UnsignedInt
//   amount           Float    @default(0) @db.Float
//   datetime_created DateTime @default(now()) @db.DateTime(0)
//   date_paid        DateTime @db.Date
//   status           Int      @default(0) @db.UnsignedTinyInt
//   type             Boolean
//   user_id          Int      @default(0) @db.UnsignedInt
// }

// model referrers {
//   id           Int      @id @default(autoincrement()) @db.UnsignedInt
//   booking_id   Int      @default(0) @db.UnsignedInt
//   client_id    Int      @default(0) @db.UnsignedInt
//   http_referer String   @db.Text
//   datetime     DateTime @default(now()) @db.DateTime(0)
// }

// model testimonials {
//   id          Int      @id @default(autoincrement()) @db.UnsignedInt
//   name        String   @default("") @db.VarChar(150)
//   photo       String   @default("") @db.VarChar(255)
//   testimonial String   @db.Text
//   source      String   @default("") @db.VarChar(255)
//   email       String   @db.VarChar(255)
//   date        DateTime @db.Date
//   homepage    Boolean  @default(false)
//   status      Boolean  @default(false)
// }

// model unsubscribes {
//   id       Int      @id @default(autoincrement()) @db.UnsignedInt
//   email    String   @unique(map: "email") @default("") @db.VarChar(100)
//   ip       String   @default("") @db.VarChar(100)
//   datetime DateTime @default(now()) @db.DateTime(0)
// }

// model users_logins {
//   id        Int      @id @default(autoincrement()) @db.UnsignedInt
//   user_id   Int      @db.UnsignedInt
//   token     String   @default("") @db.VarChar(100)
//   datetime  DateTime @default(now()) @db.DateTime(0)
//   ip        String   @default("") @db.VarChar(50)
//   useragent String   @default("") @db.VarChar(255)
//   status    Boolean  @default(true)
// }
